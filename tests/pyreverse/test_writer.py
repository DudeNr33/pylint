# Copyright (c) 2008, 2010, 2013 LOGILAB S.A. (Paris, FRANCE) <contact@logilab.fr>
# Copyright (c) 2014-2018, 2020 Claudiu Popa <pcmanticore@gmail.com>
# Copyright (c) 2014 Google, Inc.
# Copyright (c) 2014 Arun Persaud <arun@nubati.net>
# Copyright (c) 2015 Ionel Cristian Maries <contact@ionelmc.ro>
# Copyright (c) 2016 Derek Gustafson <degustaf@gmail.com>
# Copyright (c) 2018 Ville Skytt√§ <ville.skytta@iki.fi>
# Copyright (c) 2019-2021 Pierre Sassoulas <pierre.sassoulas@gmail.com>
# Copyright (c) 2019 Ashley Whetter <ashley@awhetter.co.uk>
# Copyright (c) 2020 hippo91 <guillaume.peillex@gmail.com>
# Copyright (c) 2020 Anthony Sottile <asottile@umich.edu>
# Copyright (c) 2021 Mark Byrne <mbyrnepr2@gmail.com>

# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html
# For details: https://github.com/PyCQA/pylint/blob/master/LICENSE

"""
unit test for pyreverse writer classes
"""


import codecs
import os
from difflib import unified_diff

import pytest

from pylint.pyreverse.diadefslib import DefaultDiadefGenerator, DiadefsHandler
from pylint.pyreverse.inspector import Linker
from pylint.pyreverse.utils import get_visibility
from pylint.pyreverse.writer import DotWriter, PlantUmlWriter, VCGWriter
from pylint.testutils.pyreverse import get_project


def _file_lines(path):
    # we don't care about the actual encoding, but python3 forces us to pick one
    with codecs.open(path, encoding="latin1") as stream:
        lines = [
            line.strip()
            for line in stream.readlines()
            if (
                line.find("squeleton generated by ") == -1
                and not line.startswith('__revision__ = "$Id:')
            )
        ]
    return [line for line in lines if line]


DOT_FILES = ["packages_No_Name.dot", "classes_No_Name.dot"]
COLORIZED_DOT_FILES = ["packages_colorized.dot", "classes_colorized.dot"]
VCG_FILES = ["packages_vcg.vcg", "classes_vcg.vcg"]
PUML_FILES = ["packages_plantuml.puml", "classes_plantuml.puml"]
COLORIZED_PUML_FILES = ["packages_puml_colorized.puml", "classes_puml_colorized.puml"]


def _create_files(config, name="No Name"):
    project = get_project(os.path.join(os.path.dirname(__file__), "data"), name)
    linker = Linker(project)
    handler = DiadefsHandler(config)
    dd = DefaultDiadefGenerator(linker, handler).visit(project)
    for diagram in dd:
        diagram.extract_relationships()
    if config.output_format == "vcg":
        writer = VCGWriter(config)
    elif config.output_format == "puml":
        writer = PlantUmlWriter(config)
    else:
        writer = DotWriter(config)
    writer.write(dd)


@pytest.fixture(scope="module", autouse=True)
def cleanup():
    yield
    for fname in (
        DOT_FILES + COLORIZED_DOT_FILES + VCG_FILES + PUML_FILES + COLORIZED_PUML_FILES
    ):
        try:
            os.remove(fname)
        except FileNotFoundError:
            continue


@pytest.mark.parametrize("generated_file", DOT_FILES)
def test_black_and_white_dot_output(default_config, generated_file):
    _create_files(default_config, "No Name")
    _check_file(generated_file)


@pytest.mark.parametrize("generated_file", COLORIZED_DOT_FILES)
def test_colorized_dot_output(colorized_dot_config, generated_file):
    _create_files(colorized_dot_config, "colorized")
    _check_file(generated_file)


@pytest.mark.parametrize("generated_file", VCG_FILES)
def test_black_and_white_vcg_output(black_and_white_vcg_config, generated_file):
    _create_files(black_and_white_vcg_config, "vcg")
    _check_file(generated_file)


@pytest.mark.parametrize("generated_file", PUML_FILES)
def test_standard_puml_output(standard_puml_config, generated_file):
    _create_files(standard_puml_config, "plantuml")
    _check_file(generated_file)


@pytest.mark.parametrize("generated_file", COLORIZED_PUML_FILES)
def test_colorized_puml_output(colorized_puml_config, generated_file):
    _create_files(colorized_puml_config, "puml_colorized")
    _check_file(generated_file)


def _check_file(generated_file):
    expected_file = os.path.join(os.path.dirname(__file__), "data", generated_file)
    generated = _file_lines(generated_file)
    expected = _file_lines(expected_file)
    generated = "\n".join(generated)
    expected = "\n".join(expected)
    files = f"\n *** expected : {expected_file}, generated : {generated_file} \n"
    diff = "\n".join(
        line for line in unified_diff(expected.splitlines(), generated.splitlines())
    )
    assert expected == generated, f"{files}{diff}"


@pytest.mark.parametrize(
    "names, expected",
    [
        (["__reduce_ex__", "__setattr__"], "special"),
        (["__g_", "____dsf", "__23_9"], "private"),
        (["simple"], "public"),
        (
            ["_", "__", "___", "____", "_____", "___e__", "_nextsimple", "_filter_it_"],
            "protected",
        ),
    ],
)
def test_get_visibility(names, expected):
    for name in names:
        got = get_visibility(name)
        assert got == expected, f"got {got} instead of {expected} for value {name}"
